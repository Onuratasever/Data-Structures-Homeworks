memberSearchIndex = [{"p":"hw4","c":"Username","l":"checkIfValidUsername(String)","u":"checkIfValidUsername(java.lang.String)"},{"p":"hw4","c":"Password2","l":"checkPossibilities(int, int[], int)","u":"checkPossibilities(int,int[],int)"},{"p":"hw4","c":"Password1","l":"checkUsernamePassword(int, int, Stack<Character>, Stack<Character>, Stack<Character>)","u":"checkUsernamePassword(int,int,java.util.Stack,java.util.Stack,java.util.Stack)"},{"p":"hw4","c":"Password1","l":"containsUsernameSpirit(String, String)","u":"containsUsernameSpirit(java.lang.String,java.lang.String)"},{"p":"hw4","c":"Password2","l":"control(int[])"},{"p":"hw4","c":"Password1","l":"control(String)","u":"control(java.lang.String)"},{"p":"hw4","c":"Username","l":"getUsername()"},{"p":"hw4","c":"Password1","l":"isBalancedPassword(String)","u":"isBalancedPassword(java.lang.String)"},{"p":"hw4","c":"Password1","l":"isClosed(char)"},{"p":"hw4","c":"Password2","l":"isExactDivision(int, int[])","u":"isExactDivision(int,int[])"},{"p":"hw4","c":"Password1","l":"isMatch(char, char)","u":"isMatch(char,char)"},{"p":"hw4","c":"Password1","l":"isOpen(char)"},{"p":"hw4","c":"Password1","l":"isPalindromePossible(String)","u":"isPalindromePossible(java.lang.String)"},{"p":"hw4","c":"Password1","l":"isPolindromeCreateable(String, int, int, String)","u":"isPolindromeCreateable(java.lang.String,int,int,java.lang.String)"},{"p":"hw4","c":"Password1","l":"isValid()"},{"p":"hw4","c":"Password2","l":"isValid()"},{"p":"hw4","c":"testDriver","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"hw4","c":"Password1","l":"Password1(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"hw4","c":"Password2","l":"Password2(int)","u":"%3Cinit%3E(int)"},{"p":"hw4","c":"testDriver","l":"testDriver()","u":"%3Cinit%3E()"},{"p":"hw4","c":"testDriver","l":"tester(String, String, int)","u":"tester(java.lang.String,java.lang.String,int)"}];updateSearchResults();